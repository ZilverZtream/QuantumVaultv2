name: CI # TSK018_CI_and_Toolchain_Improvements

on:
  push:
  pull_request:

env:
  CTEST_OUTPUT_ON_FAILURE: 1 # TSK018

jobs:
  build:
    name: Build & Test (${{ matrix.os }} | ${{ matrix.build_type }}) # TSK018
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, RelWithDebInfo]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x' # TSK022

      - name: Install dudect runner # TSK022
        run: python -m pip install --upgrade pip dudect

      - name: Install dependencies (Ubuntu) # TSK018
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build pkg-config libssl-dev libsodium-dev
          sudo apt-get install -y liboqs-dev || echo "liboqs-dev package not available on default channel" # TSK018

      - name: Install dependencies (macOS) # TSK018
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja openssl libsodium liboqs || true

      - name: Install dependencies (Windows) # TSK018
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install ninja -y --no-progress
          choco install openssl.light -y --no-progress
          if ((choco search libsodium --exact | Select-String "^libsodium")) {
            choco install libsodium -y --no-progress
          } else {
            Write-Host "libsodium package not available"
          }
          if ((choco search liboqs --exact | Select-String "^liboqs")) {
            choco install liboqs -y --no-progress
          } else {
            Write-Host "liboqs package not available"
          }

      - name: Configure # TSK018
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build # TSK018
        run: cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test # TSK018
        run: ctest --test-dir build --build-config ${{ matrix.build_type }}

      - name: Test concurrent access (POSIX) # TSK034
        if: runner.os != 'Windows'
        run: |
          cmake --build build --config ${{ matrix.build_type }} --target qv_concurrent_test
          ./build/bin/qv_concurrent_test --threads=8

      - name: Test concurrent access (Windows) # TSK034
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake --build build --config ${{ matrix.build_type }} --target qv_concurrent_test
          $exe = Join-Path "build" "bin" "qv_concurrent_test.exe"
          if (-not (Test-Path $exe)) { throw "Missing binary: $exe" }
          & $exe --threads=8

      - name: Verify Windows Authenticode status # TSK018
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $binary = "build/bin/qv.exe"
          if (-not (Test-Path $binary)) { throw "Missing binary: $binary" }
          $signature = Get-AuthenticodeSignature $binary
          Write-Host "Authenticode status: $($signature.Status)"
          if ($signature.Status -eq 'Invalid') { throw "Windows binary failed Authenticode verification" }

      - name: Verify macOS code signature # TSK018
        if: runner.os == 'macOS'
        run: |
          binary="build/bin/qv"
          if [ ! -f "$binary" ]; then
            echo "Missing binary: $binary" >&2
            exit 1
          fi
          if ! codesign --verify --deep --strict "$binary"; then
            echo "Unsigned development build detected (expected for CI until release certificates are provisioned)." >&2
          fi

      - name: Upload build artifacts # TSK018
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qv-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/bin/**
            build/lib/**

  sanitizers:
    needs: build # TSK039_Static_Analysis_and_CI_Quality_Gates ensure sanitizer gate is required
    name: Sanitizers (ASan + UBSan) # TSK018
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x' # TSK022

      - name: Install dudect runner # TSK022
        run: python -m pip install --upgrade pip dudect

      - name: Install dependencies (Ubuntu) # TSK018
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build pkg-config libssl-dev libsodium-dev
          sudo apt-get install -y liboqs-dev || echo "liboqs-dev package not available on default channel" # TSK018

      - name: Verify ASLR configuration # TSK018
        run: |
          state=$(cat /proc/sys/kernel/randomize_va_space)
          echo "ASLR randomize_va_space=$state"
          if [ "$state" -eq 0 ]; then
            echo "ASLR is disabled" >&2
            exit 1
          fi

      - name: Configure (sanitizers) # TSK018
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DQV_ENABLE_SANITIZERS=ON

      - name: Build (sanitizers) # TSK018
        run: cmake --build build --config RelWithDebInfo --parallel

      - name: Test (sanitizers) # TSK018
        env:
          UBSAN_OPTIONS: print_stacktrace=1
          ASAN_OPTIONS: detect_leaks=1
        run: ctest --test-dir build --build-config RelWithDebInfo

  clang-tidy:
    needs: build # TSK039_Static_Analysis_and_CI_Quality_Gates
    name: clang-tidy (Linux) # TSK039_Static_Analysis_and_CI_Quality_Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-tidy toolchain # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          sudo apt-get update
          sudo apt-get install -y clang clang-tidy ninja-build pkg-config libssl-dev libsodium-dev

      - name: Configure compilation database # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build dependencies for analysis # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: cmake --build build --config Debug --parallel

      - name: Run clang-tidy # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          clang_tidy_checks='-*,clang-analyzer-*,bugprone-*,cert-*,performance-*'
          clang_tidy_headers="${PWD}/(include|src|tests|plugins)/"
          clang_tidy_sources=$(git ls-files '*.cpp')
          if [ -z "$clang_tidy_sources" ]; then
            echo "No translation units found for clang-tidy" >&2
            exit 1
          fi
          clang-tidy \
            --warnings-as-errors='*' \
            --checks="$clang_tidy_checks" \
            -header-filter="^${clang_tidy_headers}" \
            -p build \
            $clang_tidy_sources

  coverage:
    needs: build # TSK039_Static_Analysis_and_CI_Quality_Gates
    name: Coverage (>=80%) # TSK039_Static_Analysis_and_CI_Quality_Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install coverage tooling # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov bc ninja-build pkg-config libssl-dev libsodium-dev

      - name: Build with coverage instrumentation # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DQV_ENABLE_COVERAGE=ON -GNinja
          cmake --build build --parallel

      - name: Run test suite (coverage) # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: ctest --test-dir build

      - name: Capture coverage report # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          lcov --directory build --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload coverage to Codecov # TSK039_Static_Analysis_and_CI_Quality_Gates
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f coverage.info

      - name: Enforce coverage threshold # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          coverage=$(lcov --summary coverage.info | awk '/lines/ {gsub("%", "", $2); print $2; exit}')
          if [ -z "$coverage" ]; then
            echo "Unable to parse coverage summary" >&2
            exit 1
          fi
          echo "Line coverage: ${coverage}%"
          coverage_limit=80
          below=$(python - "$coverage" "$coverage_limit" <<'PY'
import sys
coverage = float(sys.argv[1])
limit = float(sys.argv[2])
print(int(coverage < limit))
PY
)
          if [ "$below" -ne 0 ]; then
            echo "Coverage ${coverage}% below ${coverage_limit}% threshold" >&2
            exit 1
          fi

  complexity:
    needs: build # TSK039_Static_Analysis_and_CI_Quality_Gates
    name: Cyclomatic Complexity (lizard) # TSK039_Static_Analysis_and_CI_Quality_Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run lizard analysis # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          python -m pip install --upgrade pip lizard
          lizard --CCN 15 -w include src plugins tests

  semgrep:
    needs: build # TSK039_Static_Analysis_and_CI_Quality_Gates
    name: Semgrep Crypto Scan # TSK039_Static_Analysis_and_CI_Quality_Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Semgrep # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: python -m pip install --upgrade pip semgrep

      - name: Run Semgrep checks # TSK039_Static_Analysis_and_CI_Quality_Gates
        run: |
          cat <<'EOF' > semgrep-ci.yml
          rules:
            - id: insecure-rand-api
              message: Use of rand() is not cryptographically secure. Prefer platform CSPRNG APIs. # TSK039_Static_Analysis_and_CI_Quality_Gates
              languages: [c, cpp]
              severity: ERROR
              pattern: rand(...)
              metadata:
                cwe: CWE-338
                task: TSK039_Static_Analysis_and_CI_Quality_Gates
            - id: hardcoded-secret-literal
              message: Potential hardcoded credential detected. Replace with secure secret management. # TSK039_Static_Analysis_and_CI_Quality_Gates
              languages: [c, cpp]
              severity: ERROR
              pattern-either:
                - pattern: const char $VAR[] = "$SECRET";
                - pattern: std::string $VAR = "$SECRET";
                - pattern: auto $VAR = "$SECRET";
              metavariable-regex:
                VAR: (?i).*(key|secret|password|token|passphrase).*
                SECRET: (?i)[^"\s]{8,}
              metadata:
                cwe: CWE-798
                task: TSK039_Static_Analysis_and_CI_Quality_Gates
          EOF
          semgrep --config=p/owasp-top-ten --config=p/secrets --config=semgrep-ci.yml --error

  fuzz:
    name: Fuzz Harness (libFuzzer) # TSK030
    runs-on: ubuntu-latest
    env:
      LLVM_USE_SANITIZER: Address,Fuzzer # TSK030
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu fuzz) # TSK030
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build pkg-config libssl-dev libsodium-dev clang

      - name: Configure (fuzzers) # TSK030
        env:
          CC: clang
          CXX: clang++
        run: cmake -S . -B build-fuzz -DCMAKE_BUILD_TYPE=RelWithDebInfo

      - name: Build fuzzers # TSK030
        run: cmake --build build-fuzz --target fuzz_tests --parallel

      - name: Smoke test fuzzers # TSK030
        run: ./build-fuzz/bin/qv_fuzz_header -runs=1
